package presentacion;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import negocio.Juegos;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

public class Reporte2 extends javax.swing.JDialog {

    /**
     * Creates new form Reporte2
     */
    public Reporte2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        Juegos juegos = new Juegos();
        juegos.cargarDatosConsolas(jcbConsolas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jcbConsolas = new javax.swing.JComboBox<>();
        btnGraficar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jcbConsolas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una consola:" }));

        btnGraficar.setText("Graficar");
        btnGraficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(148, Short.MAX_VALUE)
                .addComponent(jcbConsolas, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(btnGraficar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jcbConsolas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGraficar)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 292, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarActionPerformed
            String consolaSeleccionada = (String) jcbConsolas.getSelectedItem();
    
    // Contar juegos por consola
    Map<String, Integer> conteoConsolas = contarJuegosPorConsola();
    
    // Obtener las top 6 consolas
    ArrayList<Map.Entry<String, Integer>> topConsolas = obtenerTopConsolas(conteoConsolas);
    
    // Crear el dataset para el gráfico
    DefaultPieDataset datos = new DefaultPieDataset();
    
    // Añadir las top 6 consolas al dataset, excluyendo la consola seleccionada si está en el top
    boolean consolaSeleccionadaEnTop = false;
    
    for (Map.Entry<String, Integer> consola : topConsolas) {
        if (consola.getKey().equals(consolaSeleccionada)) {
            consolaSeleccionadaEnTop = true;
        } else {
            datos.setValue(consola.getKey(), consola.getValue());
        }
    }
    
    // Añadir la cantidad de juegos de la consola seleccionada, solo si no estaba en el top 6
    if (!consolaSeleccionadaEnTop) {
        datos.setValue("Juegos en " + consolaSeleccionada, obtenerCantidadJuegosSeleccionada(consolaSeleccionada, conteoConsolas));
    } else {
        // Si la consola seleccionada estaba en el top 6, actualiza el valor en el dataset
        datos.setValue(consolaSeleccionada, obtenerCantidadJuegosSeleccionada(consolaSeleccionada, conteoConsolas));
    }
    
    // Crear el gráfico de pastel
    JFreeChart graficoPastel = ChartFactory.createPieChart(
            "Comparativa cantidad de juegos por consola", // nombre gráfico
            datos, // datos 
            true, // nombre categorías
            true, // herramientas
            false // generación URL
    );
    
    // Configurar el renderizador para mostrar etiquetas personalizadas
    org.jfree.chart.plot.PiePlot plot = (org.jfree.chart.plot.PiePlot) graficoPastel.getPlot();
    plot.setLabelGenerator(new org.jfree.chart.labels.StandardPieSectionLabelGenerator(
            "{0}: {1} ({2})", // {0} = nombre, {1} = cantidad, {2} = porcentaje
            new java.text.DecimalFormat("0"),
            new java.text.DecimalFormat("0.00%")
    ));
    
    // Configurar el panel del gráfico
    ChartPanel panel = new ChartPanel(graficoPastel);
    panel.setMouseWheelEnabled(true);
    panel.setPreferredSize(new Dimension(400, 300)); // Ajusta el tamaño si es necesario
    
    // Añadir el panel del gráfico al JPanel
    jPanel2.removeAll(); // Limpiar el panel antes de agregar el nuevo gráfico
    jPanel2.setLayout(new BorderLayout());
    jPanel2.add(panel, BorderLayout.CENTER);
    
    pack();
    repaint();
    }//GEN-LAST:event_btnGraficarActionPerformed
    private Map<String, Integer> contarJuegosPorConsola() {
        HashMap<String, Integer> conteoConsolas = new HashMap<>();

        for (String[] juego : Juegos.juegosNombres) {
            if (juego.length > 0) {
                String consola = juego[0];
                conteoConsolas.put(consola, conteoConsolas.getOrDefault(consola, 0) + 1);
            }
        }

        return conteoConsolas;
    }

    private ArrayList<Map.Entry<String, Integer>> obtenerTopConsolas(Map<String, Integer> conteoConsolas) {
        // Convertir el mapa en una lista de entradas
        ArrayList<Map.Entry<String, Integer>> listaConsolas = new ArrayList<>(conteoConsolas.entrySet());

        // Ordenar la lista por la cantidad de juegos en orden descendente
        listaConsolas.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));

        // Obtener las top 6 consolas
        return (ArrayList<Map.Entry<String, Integer>>) listaConsolas.stream().limit(10).collect(Collectors.toList());
    }

    private int obtenerCantidadJuegosSeleccionada(String consolaSeleccionada, Map<String, Integer> conteoConsolas) {
        return conteoConsolas.getOrDefault(consolaSeleccionada, 0);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporte2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporte2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporte2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporte2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Reporte2 dialog = new Reporte2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGraficar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> jcbConsolas;
    // End of variables declaration//GEN-END:variables
}
